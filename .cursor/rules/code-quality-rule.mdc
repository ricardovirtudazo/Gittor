---
description: Ensures code meets quality standards for readability and maintainability
globs: ["**/*.cs"]
alwaysApply: true
---

# Code Quality Rule

## Minimalist Design

- **YAGNI**: Don't implement features until needed
    - Avoid speculative generalization
    - Remove unused code and "future-proofing"
- **DRY**: Avoid duplication without premature abstraction
    - Consolidate duplicate logic but don't over-abstract
    - Create shared utilities only after repeated patterns emerge
- **Explicit Over Implicit**: Prefer readable code over clever code
    - Avoid magic strings/numbers
    - Write self-documenting code with descriptive names
    - Use comments only for "why" not "what" (code should explain what it does)
    - Avoid XML comments when descriptive naming is sufficient
    - Do not create XML documentation comments that merely restate the class or property name (e.g., no "Gets the hash" for a property named "Hash")
    - XML comments should only be used for complex logic or non-obvious behavior that cannot be conveyed by naming

## Modern C# Features

- **Type Systems**
    - Favor `record` types with `init` properties for DTOs and immutable data
    - Use primary constructors where they reduce boilerplate and improve readability
    - Enable nullable reference types to catch null reference exceptions at compile time
    - Use the `required` modifier to enforce initialization of critical properties
- **Syntax Improvements**
    - Use file-scoped namespaces to reduce indentation
    - Prefer expression-bodied members for concise implementations
    - Utilize string interpolation over string.Format for readability
    - Apply target-typed new expressions when type is clear from context
- **Advanced Patterns**
    - Use pattern matching for more expressive conditional logic
    - Favor immutable objects and collections where appropriate
    - Apply LINQ and functional patterns for declarative data transformations

## Naming Conventions

- Use clear, descriptive names that reveal intent
    - PascalCase for classes, methods, properties
    - camelCase for parameters and local variables
    - Prefix interfaces with 'I'
    - Suffix async methods with 'Async'
    - Avoid abbreviations except for standard ones (ID, HTTP, etc.)
    - Use positive phrasing (e.g., `isCorrect` instead of `isNotCorrect` or `isFalse`)
    - Use descriptive property names instead of explanatory comments (e.g., `MessageTitle` instead of `Message` with a comment)
    - Avoid unnecessary suffixes like "Model" unless they provide meaningful context (prefer `Commit` over `CommitModel` when the purpose is clear)

## Organization

- Organize code by feature, not technical concerns
- Namespace should match folder structure
- Keep implementation details hidden from API boundaries
- Maintain consistency in file structure across similar components

## Complexity Control

- Keep code straightforward with manageable complexity
    - Avoid deeply nested conditionals
    - Extract complex conditions to well-named methods
    - Favor early returns over nested conditions